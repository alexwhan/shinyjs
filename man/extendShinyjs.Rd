% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/useShinyjs.R
\name{extendShinyjs}
\alias{extendShinyjs}
\title{Extend shinyjs with your own functions}
\usage{
extendShinyjs(script, functions)
}
\arguments{
\item{script}{Path to a JavaScript file that contains all the functions.
Each function name must begin with \code{shinyjs.}, for example
\code{shinyjs.myfunc}. See 'Basic Usage' below.}

\item{functions}{Vector of funtions to be made available by \code{shinyjs}.
See 'Basic Usage' below.}
}
\value{
Scripts that \code{shinyjs} requires in order to run your JavaScript
functions as if they were R code.
}
\description{
Add your own JavaScript functions that can be called from R as if they were
regular R functions. This is a more advanced technique and can only
be used if you know JavaScript. See 'Basic Usage' below for more information on
how to use this.
}
\note{
You still need to call \code{useShinyjs()} as usual.
}
\section{Basic Usage}{

If the default functions that are provided by \code{shinyjs} are not enough,
you can add your own JavaScript functions. As a basic example, to add a
JavaScript function that shows a message to the user (similar to
\code{\link[shinyjs]{info}}), follow these steps:

\itemize{
  \item Create a JavaScript file inside the Shiny app's directory

  \code{www/js/shinyjs-ext.js}
  \item Add the following JavaScript function to the file:

    \code{shinyjs.myfunc = function(params) { alert(params); }}
  \item In your Shiny app's UI, add a call to

    \code{shinyjs::extendShinyjs("www/js/shinyjs-ext.js", "myfunc")}
  \item Now in your Shiny app's server you can call
    \code{myfunc("Hello!")} and you will get a JavaScript message
}

You can add more functions to the JavaScript file, but every function you
want to use within R has to have a name beginning with \code{shinyjs.}. When
calling \code{extendShinyjs()}, all function names of the functions you want
to use need to be given (without the leading \code{shinyjs.}, as in the
example above).
}

\section{Passing arguments from R to JavaScript}{

\code{shinyjs} will pass a single parameter to your JavaScript function.
If the function in R was called without named arguments, then it will pass
an \code{Array} of the arguments, and if the R arguments are named then
it will pass an Object with key-value pairs.

To assist with normalizing the parameters, you can call the
\code{shinyjs.getParams(params, defaults)} function, where \code{params}
are the parameters that are passed to your JavaScript function and
\code{defaults} is an object with key-value pairs of parameters, where
each key is a parameter name and each value is a default value. The order
of the parameters in this \code{defaults} object should match the order
of the parameters that users should use if they choose not to use
named arguments.

For example, if a JavaScript function expects an id parameter and a length
parameter, this could be the first few lines of the function:

\code{
  shinyjs.objlength(params) { \cr
    var defaultParams = { id : null, length : 5 }; \cr
    params = shinyjs.getParams(params, defaultParams); \cr
    // function body \cr}
}
}

